#week3作业
#词典；每个词后方存储的是其词频，词频仅为示例，不会用到，也可自行修改

Dict = {"经常":0.1,
        "经":0.05,
        "有":0.1,
        "常":0.001,
        "有意见":0.1,
        "歧":0.001,
        "意见":0.2,
        "分歧":0.2,
        "见":0.05,
        "意":0.05,
        "见分歧":0.05,
        "分":0.1}      #字典长度为12

#待切分文本
sentence = "经常有意见分歧"

#目标输出;顺序不重要
target = [
    ['经常', '有意见', '分歧'],
    ['经常', '有意见', '分', '歧'],
    ['经常', '有', '意见', '分歧'],
    ['经常', '有', '意见', '分', '歧'],
    ['经常', '有', '意', '见分歧'],
    ['经常', '有', '意', '见', '分歧'],
    ['经常', '有', '意', '见', '分', '歧'],
    ['经', '常', '有意见', '分歧'],
    ['经', '常', '有意见', '分', '歧'],
    ['经', '常', '有', '意见', '分歧'],
    ['经', '常', '有', '意见', '分', '歧'],
    ['经', '常', '有', '意', '见分歧'],
    ['经', '常', '有', '意', '见', '分歧'],
    ['经', '常', '有', '意', '见', '分', '歧']
]
#实现全切分函数，输出根据字典能够切分出的所有的切分方式
#记忆化递归
def all_cut(sentence, Dict):
    if sentence == "":         #如果字符串为空返回空列表
        return []
    #words = list(Dict.keys())  # 以列表形式返回字典中所有的键，['经常', '经', '有', '常', '有意见', '歧', '意见', '分歧', '见', '意', '见分歧', '分']
    word_set=set(Dict.keys())        #含12个元素的集合
    size=max(len(word) for word in word_set)    #3
    def dfs(s):      #深度优先搜索
        ans = []
        if s in word_set:
            ans.append(s)
        for i in range(1,len(s)):
            if s[:i] in word_set:
                for s1 in dfs(s[i:]):         #程序会在这里不断嵌套
                    ans.append(s[:i]+" "+ s1)
            if i > size:
                break
        return ans         #返回的值会传到程序嵌套的位置
    return dfs(sentence)
if __name__ == "__main__":
    result=all_cut(sentence,Dict)
    print(result)






# #生成前后缀词典
# prefix_dict = {}
# words = list(Dict.keys())     #以列表形式返回字典中所有的键，['经常', '经', '有', '常', '有意见', '歧', '意见', '分歧', '见', '意', '见分歧', '分']
# for i in range(len(words)):
#     word = words[i]
#     for j in range(1, len(word)):          # 循环词典中词的第一个字到倒数第二个字
#         if word[:j] not in prefix_dict:    # 不能用前缀覆盖词
#             prefix_dict[word[:j]] = 0      # {前缀：0}
#         if prefix_dict[word[:j]] == 1:     # 如果{词的前i个字在前缀词典中并且为一个完整的词：2}
#             prefix_dict[word[:j]] = 2
#     prefix_dict[word] = 1  # 把完整的词存入前缀字典{完整词：1}
# #print(prefix_dict)
# #{'经': 1, '经常': 1, '有': 2, '常': 1, '有意': 0, '有意见': 1, '歧': 1, '意': 1, '意见': 1, '分': 1, '分歧': 1, '见': 2, '见分': 0, '见分歧': 1}
